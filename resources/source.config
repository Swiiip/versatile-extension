Graphite.Key: "AdScaleOpenRTB"
HTTP.ContentType: "application/json"
Decoder: "versatile"
Encoder: "versatile"
Request.Timeout: 100
Macro.Price: "${AUCTION_PRICE:ENC}"
Blacklisting.Prefix: "rtb.adscale.disapproved.creatives"
Encoder.Versatile.UseNoBidSlot: false
Response.ReturnNoContentInCaseOfNoBid: true
Encoder.Versatile.Dialect: "
id = requestid # Bid request ID #
seatbid[$i] = {
    seat = \"867821\"
    bid[$k] = [{
        id = slot[$i].payload # Criteo arbirage ID #
        impid = slot[$i].proposalslotid # From bid requests slot.id : imp.id #
        price = slot[$i].price # Criteo bid price #
        adm = slot[$i].invocationcode # Criteo tag containing the price macro encrypted #
        adomain[$j] = [ slot[$i].clickdomain ] # Criteo Advertiser domain #
        crid = slot[$i].creativecode
        dealid = slot[$i].dealid # PMP Deal ID #
        ext = {
            avn = slot[$i].clientname # Criteo Advertiser name #
            agn = \"criteo\"
            test = true
        }
    }]
}
"
Decoder.Versatile.Dialect.QueryString: " "
Decoder.Versatile.Dialect: "
proposal = {
    analysis = 1 # Decoded #
    publisher = {
        id = if (app.id # Application ID if app #, app.id, site.publisher.id # Site id otherwise # )
        url = if (app.domain # Application domain if app #, app.domain, if(site.page, site.page, site.domain) # Site page or site domain otherwise# )
    }
    request = {
        id = id
        timeout = tmax
        currency = if( cur # Currency sent by the SSP #, cur , \"EUR\" # Default currency # )
    }
    user = {
        criteoid = user.buyeruid # Criteo id #
        ipaddress = device.ip
        useragent = device.ua
        language = device.language
    }
    slots[$i] = {
        intention = if (equal(toint(imp[$i].instl), 1), # If instl #
            if (site.id, 1 #  Decline instl on mWeb #, 0),
            if (equal(toint(imp[$i].banner.ext.popunder), 1), # If popunder #
                1, #  Decline if popunder #
                0) # Accept #
        )
        instl = imp[$i].instl
        id = imp[$i].id
        placementid = imp[$i].tagid
        secure = imp[$i].secure
        rendercontainer = if (site.id, 0 # IFrame #, 1 # Javascript # )
        sizes = [{
            width = imp[$i].banner.w
            height = imp[$i].banner.h
        }]
        visibility = select(imp[$i].banner.pos,
            3.0, 0,
            1.0, 1,
            nan()
        )
        deals[$j] = {
            floor = imp[$i].pmp.deals[$j].bidfloor
            id = imp[$i].pmp.deals[$j].id
        }
    }
    device = {
        id = device.ifa
        category = select ( tolower (device.os),
            \"android\",\"GAID\",
            \"ios\", \"IDFA\" )
        environment = if (site.id, 0 # Web #, 1 # InApp #)
        system = select ( tolower (device.os),
           \"android\", 2 # Android #,
           \"ios\", 1 # iOS # )
    }
    app = {
        id = app.bundle # used for glup #
        name = app.name # used for glup #
    }
}"
Decoder.VersatileReport.Dialect: "
report = {
    slots[$i] = {
        request_id = notifications[$i].id
        price_paid = notifications[$i].p
        payload = notifications[$i].bidid
        response_time_ms = notifications[$i].t
        # payload = TBD #
        external_status = select(
        if (equal(notifications[$i].win, true), \"win\", notifications[$i].r ),
            \"win\",                  0,
            \"cpm\",                  101,
            \"privateSale\",          102,
            \"pending\",              201,
            \"declined\",             202,
            \"agencyBlocked\",        301,
            \"brandBlocked\",         302,
            \"invalidResponse\",      401,
            \"timeout\",              402,
            \"incompleteResponse\",   403,
            \"formatBlocked\",        404,
            \"brandInconsistency\",   501,
            \"floorInconsistency\",   502,
            \"formatInconsistency\",  503,
            \"seatInconsistency\",    504,
            \"dealInconsistency\",    505,
            \"other\",                99,
            -1
        )
        status = select(
        if (equal(notifications[$i].win, true), \"win\", notifications[$i].r ),
            \"win\",                  0,  # winner #
            \"cpm\",                  16, # BidTooLow #
            \"privateSale\",          5,  # specialRelationshipCompetitor #
            \"pending\",              13, # CreativeIssue #
            \"declined\",             14, # Blacklisted #
            \"agencyBlocked\",        15, # Loser_configError #
            \"brandBlocked\",         14, # Blacklisted #
            \"invalidResponse\",      12, # InvalidReponse #
            \"timeout\",              10, # Timeout #
            \"incompleteResponse\",   12, # InvalidReponse #
            \"formatBlocked\",        13, # Loser_creativeIssue #
            \"brandInconsistency\",   12, # InvalidReponse #
            \"floorInconsistency\",   16, # BidTooLow #
            \"formatInconsistency\",  13, # Loser_creativeIssue #
            \"seatInconsistency\",    12, # InvalidReponse #
            \"dealInconsistency\",    12, # InvalidReponse #
            \"other\",                1,  # Unknown reason #
            1,                            # Unknown reason #
        )
    }
}
"