# [PackageDev] target_format: json, ext: tmLanguage.json
---
name: Versatile
scopeName: source.versatile
fileTypes: [.config]
uuid: 5f4ef975-8f06-40c7-a78c-a6e7820644a3

patterns:
- include: '#dialects'
- include: '#headers'
- include: '#comments'

repository:
  headers:
    comment: all lines but the dialect lines
    name: meta.headerContent.versatile
    match: ([^\.]*)(\.[^:]*)?[[:alnum:]]*\s*\:\s*(.*)
    captures:
      "1": 
        name: entity.name.type.versatile
      "2": 
        name: entity.other.attribute-name.versatile
      "3": 
        name: meta.headerContent.value.versatile
        patterns:
          - include: '#header-string'
          - include: '#numbers'
          - include: '#booleans'
          - include: '#comments'
  header-string:
    name: string.quoted.double.versatile
    begin: \"
    end: \"
    patterns:
    - match: (\$\{[^\}]*\})|(\%\%[^\%]*\%\%)
      comment: macros inside a header string
      captures:
        "1": {name: entity.other.attribute-name.versatile}
        "2": {name: entity.other.attribute-name.versatile}
  
  dialects:
    comment: scope related to dialects (decoder, encoder, ...)
    name: meta.dialect.versatile
    begin: (Decoder|Encoder)\.(Versatile|VersatileReport)(\.Dialect).*\s*:(\s*\")
    beginCaptures:
      "1": {name: entity.name.type.versatile}
      "2": {name: entity.other.attribute-name.versatile}
      "3": {name: entity.name.function.versatile}
      "4": {name: entity.other.inherited-class.versatile}
    end: (\")
    endCaptures:
      "1": {name: entity.other.inherited-class.versatile}
    patterns:
    - include: '#core-patterns'
    - include: '#comments'

  index-var:
    comment: index $i to iterate through an array
    name: meta.array.index.versatile
    match: (\$[_$[:alnum:]]*)
    captures:
      "1": {name: keyword.control.versatile}

  one-line-attribute:
    comment: hack to color lines of type, attribute = property
    match: ^\s*(\w*)\s*\=\s*(\w*)\s*$
    captures:
      "1": {name: variable.other.versatile}
      "2": {name: entity.other.attribute-name.versatile}

  object:
    comment: object scope
    name: meta.object.versatile
    begin: \{
    end: \}
    patterns:
    - include: '#core-patterns'

  numbers:
    name: constant.numeric.versatile
    match: (\d+\.?\d*)

  comments:
    name: comment.line.number-sign.versatile
    begin: \#
    end: \#

  attribute: 
    comment: base scope, attribute of an object
    match: ([_$[:alpha:]][_$[:alnum:]]*)
    captures:
      "1": {name: variable.other.versatile}
    patterns:
    - include: '#index-var'
    - include: '#comments'

  function:
    comment: functions scope, functionName(.*)
    begin: (\??[_$[:alpha:]][_$[:alnum:]]*)\s?\(
    beginCaptures:
      "1": {name: entity.name.function.versatile}    
    end: \)
    contentName: meta.function.parameters
    patterns:
    - include: '#core-patterns'

  array:
    comment: array scope, arrayName[.*]
    name: meta.array.versatile
    begin: \.?([_$[:alnum:]]*)?\[
    beginCaptures:
      "1": 
        name: meta.array.name.versatile
    end: \]
    patterns:
    - include: '#core-patterns'

  dialect-string:
    comment: \"Comments inside dialect\"
    name: string.interpolated.versatile
    begin: \\\"
    end: \\\"

  property:
    comment: .someProperty
    name: meta.property.versatile 
    match: \.([_$[:alnum:]]*)
    captures:
      "1": {name: entity.other.attribute-name.versatile}

  booleans:
    comment: true or false
    name: constant.language.versatile
    match: true|false

  core-patterns:
    patterns:
    - include: '#function'
    - include: '#array'
    - include: '#object'
    - include: '#property'
    - include: '#numbers'
    - include: '#index-var'
    - include: '#one-line-attribute'
    - include: '#attribute'
    - include: '#booleans'
    - include: '#dialect-string'
    - include: '#comments'

...